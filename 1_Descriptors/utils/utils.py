"""Structural descriptors of complex networks""""""Authors: Edison Bejarano - Eric walzter"""# Import librariesimport osimport coloramaimport numpy as npfrom colorama import Fore, Back, Stylecolorama.init(autoreset=True)import globimport pandas as pdimport zipfileimport igraph as igraph# Function to extrac and read filesdef extract_read_files(path, output):    with zipfile.ZipFile(path, "r") as zip_ref:        zip_ref.extractall(output)    path_files = glob.glob(output + '/*/*', recursive=True)    name_file = ['model', 'real', 'toy']    graph_models = ['model', 'real', 'toy']    for i in range(3):        graph_models[i], name_file[i] = read_data(path_files[i])    return name_file, graph_modelsdef read_data(path_files):    """    This function read the path and deliver lists, one of them, with the name of the kind of model graph names    and the other with the graphs.    path_files :param  The origin path of the files    :return Read and return the data as file names and a list with the graphs models    """    name_networks = os.listdir(path_files)    print(f"{Back.GREEN}You have {len(name_networks)} models from the '{path_files}'  path:")    root_networks = glob.glob(path_files + '/*.net')    data_networks = []    for i in range(len(root_networks)):        data_networks.append(igraph.read(root_networks[i]))        print(name_networks[i])    return data_networks, name_networksdef compute_descriptors(name, graphs):    """    This function takes the name and graphs models and calculates the descriptors, then stores them in a csv file    :param name:    Neural network type name    :param graphs:  Neural network file graphs    :return:        Number of nodes                    Number of edges                    Minimum, maximum, and average degree                    Average clustering coefficient (average of the clustering coefficient of each node)                    Assortativity                    Average path length (average distance between all pairs of nodes)                    Diameter (maximum distance between nodes in the network)    """    descriptors = []    number_files = len(graphs)    for i in range(number_files):        number_models = len(graphs[i])        for j in range(number_models):            Model_name = name[i][j]            nodes = graphs[i][j].vcount()            edges = graphs[i][j].ecount()            average_degree = '{:.4f}'.format(float(edges / nodes))  # Total Edges/Total Nodes=Average Degree            max_degree = graphs[i][j].maxdegree()            min_degree = min(graphs[i][j].degree())            avg_clustering_cf = '{:.4f}'.format(float(graphs[i][j].transitivity_undirected()))            assortat = '{:.4f}'.format(float(graphs[i][j].assortativity_degree()))            avg_path_length = '{:.4f}'.format(float(np.mean(graphs[i][j].shortest_paths())))            diameter = graphs[i][j].diameter()            descriptors.append(                [Model_name, nodes, edges, average_degree, max_degree, min_degree, avg_clustering_cf, assortat,                 avg_path_length, diameter])    descriptors = pd.DataFrame(descriptors)    descriptors.columns = ["Model", "Nodes", "Edges", "Average_degree", "Max_degree", "Min_degree",                           "Average_clustering_coefficient", "Assortativity", "Average_path_length", "Diameter"]    print(descriptors)    return descriptorsdef real_networks_airports(name, networks):    """    Numerical descriptors of the nodes of the network real/airports_UW.net    :param name:    :param networks:    :return:                        Degree                        Strength                        Clustering coefficient                        Average path length (average distance to the rest of the nodes)                        Maximum path length (maximum distance to the rest of the nodes)                        Betweenness                        Eigenvector centrality                        PageRank    """    name_networks = name[2][2]    graph_networks = networks[2][2]    print(graph_networks.vcount())  #Compute nodes or vertices    print(graph_networks.ecount())  #Compute the edges    print(len(graph_networks.degree()))     # Compute the degree for each node    print(graph_networks.degree())    print(len(graph_networks.strength()))   # Compute the strength for each node    print(graph_networks.strength())