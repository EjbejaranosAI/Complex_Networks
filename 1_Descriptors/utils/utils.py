"""Structural descriptors of complex networks"""import osimport coloramaimport numpy as npfrom colorama import Fore, Back, Stylecolorama.init(autoreset=True)"""Authors: Edison Bejarano - Eric walzter"""# Import librariesimport globimport pandas as pdimport zipfileimport igraph as igraph# Function to extrac and read filesdef extract_read_files(path, output):    with zipfile.ZipFile(path, "r") as zip_ref:        zip_ref.extractall(output)    path_files = glob.glob(output + '/*/*', recursive=True)    name_file =['model','real','toy']    graph_models = ['model','real','toy']    for i in range(3):        graph_models[i], name_file[i] = read_data(path_files[i])    return name_file, graph_modelsdef read_data(path_files):    name_networks = os.listdir(path_files)    print(f"{Back.GREEN}You have {len(name_networks)} models from the '{path_files}'  path:")    root_networks = glob.glob(path_files + '/*.net')    data_networks = []    for i in range(len(root_networks)):        data_networks.append(igraph.read(root_networks[i]))        print(name_networks[i])    return data_networks, name_networksdef compute_descriptors(name, graphs):    descriptors = []    number_files = len(graphs)    for i in range(number_files):        number_models = len(graphs[i])        for j in range(number_models):            Model_name = name[i][j]            nodes = graphs[i][j].vcount()            edges = graphs[i][j].ecount()            average_degree = '{:.4f}'.format(float(edges / nodes))        #Total Edges/Total Nodes=Average Degree            max_degree = graphs[i][j].maxdegree()            min_degree = min(graphs[i][j].degree())            avg_clustering_cf = '{:.4f}'.format(float(graphs[i][j].transitivity_undirected()))            assortat = '{:.4f}'.format(float(graphs[i][j].assortativity_degree()))            avg_path_length = '{:.4f}'.format(float(np.mean(graphs[i][j].shortest_paths())))            diameter = graphs[i][j].diameter()            descriptors.append([Model_name,nodes,edges,average_degree,max_degree,min_degree,avg_clustering_cf,assortat,avg_path_length,diameter])    descriptors = pd.DataFrame(descriptors)    descriptors.columns = ["Model","Nodes","Edges","Average_degree","Max_degree","Min_degree","Average_clustering_coefficient","Assortativity","Average_path_length","Diameter"]    print(descriptors)    return descriptors