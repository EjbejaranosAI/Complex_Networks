tuples = [tuple(x) for x in graph_networks[['u', 'v', 'length']].values]    graph_igraph = igraph.Graph.TupleList(tuples, directed=False, edge_attrs=['length'])    # create nx graph    graph_nx = nx.from_pandas_edgelist(graph_networks, source='u', target='v', edge_attr=True)    def distance_shortest_path(u, v):        return graph_igraph.shortest_paths(u, v, weights='length')[0]    get_length = lambda edge: graph_igraph.es[edge]['length']    def distance_path_then_sum(u, v):        path = graph_igraph.get_shortest_paths(u, v, weights='length', output='epath')[0]        return sum(map(get_length, path))    def distance_nx(u, v):        return nx.shortest_path_length(graph_nx, u, v, weight='length')    print('distance_shortest_path ', end='')    start = time.time()    for node in some_nodes:        distance_shortest_path('Köln Hbf', node)    print('took', time.time() - start)    print('distance_nx ', end='')    start = time.time()    for node in some_nodes:        distance_nx('Köln Hbf', node)    print('took', time.time() - start)    print('distance_path_then_sum ', end='')    start = time.time()    for node in some_nodes:        distance_path_then_sum('Köln Hbf', node)    print('took', time.time() - start)